package generator

import (
	"fmt"
	"io"
	"log"
	"path/filepath"
	"regexp"
	"strings"

	b "github.com/malpa222/postlite/lib/blogfsys"
	"github.com/malpa222/postlite/lib/parser"
)

// Basic site tree:
// mysite/
// ├── assets/       # all media (images etc.)
// ├── index.md      # landing page
// ├── posts/
// ├── public/       # auto generated by postlite
// └── styles

var fsys b.BlogFsys

func GenerateStaticContent(root string) error {
	fsys = b.NewBlogFsys(root)

	// set up filesystem
	if err := fsys.Clean(b.Public); err != nil {
		return err
	}

	// find root directories
	if dirs, err := fsys.Find(1, dirFilter); err != nil {
		return err
	} else {
		copyAssets(dirs)
	}

	// find all markdown documents
	if files, err := fsys.Find(0, mdFilter); err != nil {
		return err
	} else {
		parseMarkdown(files)
	}

	return nil
}

func copyAssets(dirs []b.DataSource) {
	for _, dir := range dirs {
		log.Printf("Copying %s ...", dir.GetPath())

		dst := filepath.Join(b.Public, dir.GetPath())
		if err := fsys.Copy(dir, dst); err != nil {
			log.Printf("Copying failed: %s", err)
		}
	}
}

func parseMarkdown(files []b.DataSource) {
	for _, file := range files {
		log.Printf("Parsing %s ...", file.GetPath())

		src, err := file.Open()
		if err != nil {
			log.Printf("Couldn't open %s: %s", file.GetPath(), err)
			continue
		}
		defer src.Close()

		md, err := io.ReadAll(src)
		if err != nil {
			log.Printf("Couldn't read %s: %s", file.GetPath(), err)
			continue
		}

		html := parser.ParseMarkdown(md)

		dst := strings.Replace(file.GetPath(), ".md", ".html", 1)
		dst = filepath.Join(b.Public, dst)

		var outFile = b.BlogMemBuf{Buf: html}

		if err := fsys.Copy(&outFile, dst); err != nil {
			log.Printf("Copying %s failed: %s", file.GetPath(), err)
			continue
		}
	}
}

var mdFilter b.FilterFunc = func(file b.DataSource) bool {
	return file.GetKind() == b.MD
}

var dirFilter b.FilterFunc = func(file b.DataSource) bool {
	if file.GetKind() != b.Dir {
		return false
	}

	pattern := fmt.Sprintf("%s|%s", b.Public, b.Posts)
	re := regexp.MustCompile(pattern)

	return !re.MatchString(file.GetPath())
}
